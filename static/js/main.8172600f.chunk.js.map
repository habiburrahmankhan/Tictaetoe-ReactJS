{"version":3,"sources":["component/square.js","component/board.js","component/game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","handleClick","value","Board","renderSquare","i","squares","clickAction","this","React","Component","Game","handleclick","history","state","length","calculateWinner","xisNext","setState","concat","stepno","Array","fill","status","current","winner","possibility","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAEe,SAASA,EAAOC,GAE3B,OAAU,4BAAQC,UAAY,SAASC,QAAWF,EAAMG,aAA9C,IAA6DH,EAAMI,MAAnE,K,ICFQC,E,4MAElBC,aAAe,SAACC,GACZ,OACI,kBAACR,EAAD,CAAQK,MAAU,EAAKJ,MAAMQ,QAAQD,GAAKJ,YAAe,kBAAK,EAAKH,MAAMS,YAAYF,O,uDAKxF,OAAU,6BACP,yBAAKN,UAAY,cACjBS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAGlB,yBAAKL,UAAY,cAChBS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAGnB,yBAAKL,UAAY,cAChBS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAEnB,4BAAQL,UAAY,iBAApB,mB,GA3BwBU,IAAMC,WCCpBC,E,kDAElB,WAAYb,GACX,IAAD,8BACI,cAAMA,IAUVc,YAAc,SAACP,GACf,IAAMQ,EAAU,EAAKC,MAAMD,QAErBP,EADUO,EAAQA,EAAQE,OAAQ,GAChBT,QACTU,EAAgBV,IAGlBA,EAAQD,KAIrBC,EAAQD,GAAK,EAAKS,MAAMG,QAAU,IAAM,IACpC,EAAKC,SAAS,CACVL,QAAUA,EAAQM,OAAO,CACrBb,QAAUA,IAEdW,SAAW,EAAKH,MAAMG,QACtBG,OAASP,EAAQE,WA1BrB,EAAKD,MAAQ,CACTG,SAAU,EACVG,OAAS,EACTP,QAAU,CAAC,CACPP,QAAUe,MAAM,GAAGC,KAAK,SANpC,E,qDAmCW,IAIHC,EAJE,OACAV,EAAUL,KAAKM,MAAMD,QACrBW,EAAUX,EAAQA,EAAQE,OAAQ,GAGlCU,EAAST,EAFCQ,EAAQlB,SAexB,OATGiB,EAFAE,EAES,aAAeA,EAGd,qBAAuBjB,KAAKM,MAAMG,QAAU,MAAQ,OAE1C,IAApBT,KAAKM,MAAMM,SAEVG,EAAS,sBAEL,yBAAKxB,UAAY,QACrB,yBAAKA,UAAY,cACP,kBAAC,EAAD,CAAOQ,YAAe,SAACF,GAAD,OAAK,EAAKO,YAAYP,IAAKC,QAAWkB,EAAQlB,WAEtF,yBAAKP,UAAY,aAAjB,IAA+BwB,Q,GA5DAd,IAAMC,WAkEzC,SAASM,EAAgBV,GAWrB,IAVA,IAAMoB,EAAa,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAG,EAAG,GACP,CAAC,EAAI,EAAG,GACR,CAAC,EAAE,EAAG,GACN,CAAC,EAAI,EAAG,GACR,CAAC,EAAI,EAAG,GACR,CAAC,EAAE,EAAI,GACP,CAAC,EAAE,EAAE,IAEDrB,EAAG,EAAIA,EAAIqB,EAAYX,OAAQV,IACvC,CAAC,IAAD,cACsBqB,EAAYrB,GADlC,GACWsB,EADX,KACcC,EADd,KACiBC,EADjB,KAEI,GAAGvB,EAAQqB,IAAMrB,EAAQqB,KAAKrB,EAAQsB,IAAMtB,EAAQsB,KAAKtB,EAAQuB,GAE7D,OAAOvB,EAAQqB,GAGvB,OAAO,K,UC1EIG,E,uKAPX,OACE,kBAAC,EAAD,U,GAJYrB,IAAMC,WCQJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8172600f.chunk.js","sourcesContent":["import React from 'react' \n\nexport default function Square(props)\n{\n    return    <button className = \"square\" onClick = {props.handleClick}> {props.value} </button>\n        \n    \n} ","import React from 'react'\nimport Square from \"./square\"\nexport default class  Board extends React.Component\n{\n    renderSquare = (i)=>  {\n        return(\n            <Square value = { this.props.squares[i] } handleClick = {()=> this.props.clickAction(i) } /> \n        )\n    }\n    render()\n    {\n         return    <div>\n            <div className = \"border-row\" >\n           {this.renderSquare(0)}\n           {this.renderSquare(1)}\n           {this.renderSquare(2)}\n            </div> \n\n            <div className = \"border-row\" >\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            </div>\n\n            <div className = \"border-row\" >\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            </div>\n            <button className = \"squarerefresh\"   >  Refresh </button>  \n            </div>\n        }        \n}\n","import React from 'react'\nimport Board from \"./board\"\n\nexport default class  Game extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            xisNext : true , \n            stepno : 0 , \n            history : [{\n                squares : Array(9).fill(null)\n            }] , \n        }\n    }\n\n    handleclick = (i)=> {\n    const history = this.state.history \n    const current = history[history.length -1 ]\n    const squares = current.squares \n    const winner = calculateWinner(squares)\n   \n   \n    if(winner || squares[i])\n    {\n        return \n    }\n    squares[i] = this.state.xisNext ? \"X\" : \"O\"\n        this.setState({\n            history : history.concat({\n                squares : squares \n            }) , \n            xisNext : !this.state.xisNext , \n            stepno : history.length \n\n        })\n}\n\n\n\n    render()  {\n        const history = this.state.history ; \n        const current = history[history.length -1 ]\n        const squares = current.squares \n        let status \n        const winner = calculateWinner(squares)\n        \n        if(winner)\n        {\n           status = \"Winner is \" + winner\n        }\n        else{\n            status = \" Next Player is  \" + (this.state.xisNext ? \" X \" : \" O \")\n        }\n        if(this.state.stepno===9)\n        {\n            status = \" The Match is Tie \" \n        }\n        return  <div className = \"game\"> \n            <div className = \"game-board\">\n                      <Board clickAction = {(i)=>this.handleclick(i)}  squares = {current.squares} />\n            </div>\n    <div className = \"game-info\"> {status }</div>  \n   \n            </div>\n    }\n    \n}          \nfunction calculateWinner(squares) {\n    const possibility =[\n        [0,1,2] , \n        [3 ,4 ,5 ] , \n        [6 , 7, 8] , \n        [0,3, 6] , \n        [1 , 4 ,7] , \n        [2 , 5 ,8 ] , \n        [0,4 , 8], \n        [2,4,6 ]\n    ]\n    for(let i =0 ; i < possibility.length; i++)\n    {\n        const [a, b, c] = possibility[i] ; \n        if(squares[a] && squares[a]===squares[b] && squares[b]===squares[c])\n        {\n            return squares[a] \n        }\n    }\n    return null ;\n    \n}\n","import React from 'react';\nimport Game from \"./component/game\"\nimport './App.css';\n\nclass App extends React.Component {\n  render()\n  {\n    return (\n      <Game/>\n     )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}